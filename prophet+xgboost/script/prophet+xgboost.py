# -*- coding: utf-8 -*-
"""prophet+xgboost.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1m0hA5PZBNJ2-0QthDBGfruQG3sK7zJsb
"""

# ============================================================
# ✅ Colab: Hybrid Forecast (Prophet + XGBoost Residuals)
# ============================================================

# ------------------------------------------------------------
# 0. Setup: Install dependencies
# ------------------------------------------------------------

!pip install prophet xgboost scikit-learn matplotlib --quiet

# ------------------------------------------------------------
# 1. Standard Libraries
# ------------------------------------------------------------

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from prophet import Prophet
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import mean_absolute_error, mean_squared_error
from xgboost import XGBRegressor
from google.colab import files

# ------------------------------------------------------------
# 2. Upload your CSV file
# ------------------------------------------------------------

print("📂 Please choose your CSV file...")
uploaded = files.upload()

for filename in uploaded.keys():
    file_path = filename

print(f"✅ Loaded file: {file_path}")

# ------------------------------------------------------------
# 3. Read and clean
# ------------------------------------------------------------

df = pd.read_csv(file_path)
df.columns = df.columns.str.strip()

df['Date'] = pd.to_datetime(df['Date'], errors='coerce', dayfirst=True)

if df['Date'].dt.tz is not None:
    df['Date'] = df['Date'].dt.tz_convert(None)

df = df.dropna(subset=['Date']).sort_values('Date')

print("✅ Data range:", df['Date'].min(), "→", df['Date'].max())

# ------------------------------------------------------------
# 4. Prophet dataframe + cap
# ------------------------------------------------------------

df_prophet = df[['Date', 'Available']].rename(columns={'Date': 'ds', 'Available': 'y'})
cap_value = df_prophet['y'].max() * 1.1
df_prophet['cap'] = cap_value

model = Prophet(
    growth='logistic',
    daily_seasonality=True,
    yearly_seasonality=True,
    changepoint_prior_scale=0.5,
    seasonality_prior_scale=10.0
)
model.fit(df_prophet)

# ------------------------------------------------------------
# 5. Exact forecast range
# ------------------------------------------------------------

start_date = pd.Timestamp('2025-02-28 00:10:01')
end_date   = pd.Timestamp('2025-03-07 14:11:23')

periods = int((end_date - df_prophet['ds'].max()).total_seconds() / 3600)
if periods <= 0:
    raise ValueError("❌ Forecast end date must be after last training timestamp!")

future = model.make_future_dataframe(periods=periods, freq='1h')
future['cap'] = cap_value

forecast = model.predict(future)

print("Prophet fit range:", df_prophet['ds'].min(), "→", df_prophet['ds'].max())
print("Forecast range:   ", forecast['ds'].min(), "→", forecast['ds'].max())

model.plot(forecast)
plt.title('Prophet Forecast with Cap')
plt.show()

# ------------------------------------------------------------
# 6. Compute residuals
# ------------------------------------------------------------

df_merged = pd.merge(df_prophet, forecast[['ds', 'yhat']], on='ds', how='inner')
df_merged['residual'] = df_merged['y'] - df_merged['yhat']

residuals = df_merged[['ds', 'residual']].dropna().set_index('ds')
residuals_hourly = residuals.resample('1h').mean().interpolate()

# ------------------------------------------------------------
# 7. Prepare features for XGBoost
# ------------------------------------------------------------

residuals_hourly['hour'] = residuals_hourly.index.hour
residuals_hourly['dayofweek'] = residuals_hourly.index.dayofweek
residuals_hourly['month'] = residuals_hourly.index.month

target = residuals_hourly['residual'].values
features = residuals_hourly[['hour', 'dayofweek', 'month']].values

split_index = int(len(features) * 0.8)
X_train, X_test = features[:split_index], features[split_index:]
y_train, y_test = target[:split_index], target[split_index:]

# ------------------------------------------------------------
# 8. Train XGBoost model
# ------------------------------------------------------------

xgb_model = XGBRegressor(n_estimators=100, learning_rate=0.1, max_depth=3)
xgb_model.fit(X_train, y_train)

y_pred = xgb_model.predict(X_test)
mae = mean_absolute_error(y_test, y_pred)
rmse = np.sqrt(mean_squared_error(y_test, y_pred))
print(f'✅ Residuals MAE: {mae:.2f} | RMSE: {rmse:.2f}')

plt.plot(y_test, label='Actual Residuals')
plt.plot(y_pred, label='Predicted Residuals')
plt.legend()
plt.title('XGBoost Residuals Test')
plt.show()

# ------------------------------------------------------------
# 🔮 9. Forecast residuals ahead
# ------------------------------------------------------------

forecast_range = forecast.loc[forecast['ds'].between(start_date, end_date)].copy()

forecast_range['hour'] = forecast_range['ds'].dt.hour
forecast_range['dayofweek'] = forecast_range['ds'].dt.dayofweek
forecast_range['month'] = forecast_range['ds'].dt.month

residual_forecast = xgb_model.predict(forecast_range[['hour', 'dayofweek', 'month']].values)

# ------------------------------------------------------------
# 10. Combine Prophet + residuals
# ------------------------------------------------------------

prophet_forecast = forecast_range['yhat'].values
hybrid_forecast = prophet_forecast + residual_forecast
hybrid_forecast = np.clip(hybrid_forecast, 0, cap_value)

final_df = pd.DataFrame({
    'Date': forecast_range['ds'].values,
    'Prophet': prophet_forecast,
    'Residuals': residual_forecast,
    'Hybrid_Available': hybrid_forecast.astype(int)
})

plt.figure(figsize=(14, 5))
plt.plot(final_df['Date'], final_df['Hybrid_Available'], label='Hybrid Forecast')
plt.plot(final_df['Date'], final_df['Prophet'], label='Prophet Only', linestyle='--')
plt.axhline(cap_value, color='red', linestyle='--', label='Capacity Cap')
plt.legend()
plt.title('✅ Hybrid Forecast (Prophet + XGBoost)')
plt.show()

# ------------------------------------------------------------
# 11. Download results
# ------------------------------------------------------------

final_csv = "hybrid_forecast_prophet_xgb.csv"
final_df.to_csv(final_csv, index=False)
files.download(final_csv)

print(f"✅ Forecast saved as: {final_csv}")
